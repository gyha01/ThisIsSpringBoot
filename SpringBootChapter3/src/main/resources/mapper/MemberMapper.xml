<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.main.mapper.MemberMapper">

    <!--컬럼 이름과 프로퍼티 이름이 다르더라도 매핑할 수 있도록 설정-->
    <resultMap id = "memberResult" type = "mybatis.main.mapper.MemberMapper">
        <result column = "display_name" property = "name"/>
        <result column = "primary_contact" property = "email"/>
        <result column = "age" property = "age"/>
    </resultMap>

    <!--전체 멤버 조회-->
    <select id="selectAll">SELECT * FROM member</select>
    <!--멤버를 아이디로 조회-->
    <!--Optional 객체로 결과를 받는 이유: 없을 수도 있기 때문
    / 예외 발생 & 디폴트 객체 생성 등의 작업 가능-->
    <select id="selectById">select  * from member where id = #{id}</select>
    <!--이메일로 객체 조회-->
    <select id="selectByEmail">select * from member where email = #{email}</select>
    <!--이름의 일부분으로 조회(like 사용)-->
    <select id = "selectByNameLike">select * from member where name like #{name}</select>
    <!--나이가 적은 순으로 정렬-->
    <select id="selectAllOrderByAgeAsc">select * from member order by age asc</select>
    <!--정렬 기준과 정렬 방향을 정한채로 정렬
    이럴 때는 #{}가 아닌 ${}로 해야 함-->
    <select id="selectAllOrderBy">select * from member order by ${order} ${dir}</select>
    <!--테이블에 저장되어 있는 row 개수-->
    <select id="selectAllCount">select count(*) from member</select>
    <!-- keyProperty: 자바 객체의 어느 필드에 키를 저장하는지, keyColumn: DB의 어느 컬럼이 키 컬럼인지
    생성할 때 할당된 키 값을 파라미터로 전달된 객체의 키 프로퍼티에 설정해줌
    insert하고 나서 키 값이 할당되었는지 알기 위해 추가적인 쿼리 작성을 할 필요가 없음-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="member.id" keyColumn="id">
        INSERT INTO member(name, email, age) VALUES(#{member.name}, #{member.email}, #{member.age})
    </insert>
    <!--id가 일치하는 해당 멤버의 정보 수정-->
    <update id="update">
        UPDATE member SET name=#{member.name}, email=#{member.email}, age=#{member.age} WHERE id=#{member.id}
    </update>
    <!--id가 일치하는 멤버 삭제-->
    <delete id="delete">
        DELETE FROM member WHERE id=#{member.id}
    </delete>
    <!--특정 아이디를 갖는 멤버 정보 삭제-->
    <delete id="deleteById">
        DELETE FROM member WHERE id=#{id}
    </delete>
    <!--모든 멤버 정보 삭제-->
    <delete id="deleteAll">
        DELETE FROM member
    </delete>
</mapper>
